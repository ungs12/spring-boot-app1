# 워크플로우 이름 설정
name: Java CI with Maven

# 워크플로우 실행 조건 설정
on:
  push:
    branches: [ "main" ]          # main 브랜치에 push 시 실행
  pull_request:
    branches: [ "main" ]          # main 브랜치로 PR 생성 시 실행

jobs:
  build:
    runs-on: ubuntu-latest        # GitHub에서 제공하는 Ubuntu 최신 가상 환경에서 실행

    steps:
    # 1. 현재 GitHub Repository 코드 체크아웃
    - uses: actions/checkout@v4

    # 2. JDK 21 설정 (Temurin 배포판 사용, Maven 캐시 활성화)
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'            # 사용할 Java 버전
        distribution: 'temurin'       # JDK 배포판
        cache: maven                  # Maven 의존성 캐시 사용으로 빌드 속도 향상

    # 3. Docker 이미지 빌드 (현재 디렉토리의 Dockerfile 기준)
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME}}/spring-boot-app1 .

    # 4. DockerHub 로그인
    - name: Docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}   # GitHub Secrets에 저장된 DockerHub 사용자명
        password: ${{ secrets.DOCKERHUB_PASSWORD }}   # GitHub Secrets에 저장된 DockerHub 비밀번호

    # 5. DockerHub에 이미지 푸시
    - name: Docker Hub image push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/spring-boot-app1

    # 6. EC2 개인 키 복호화 및 권한 설정
    - name: Decode and save private key
      run: |
        echo "${{ secrets.EC2_PRIVATE_KEY }}" > ec2_key.pem    # 개인키 파일 생성
        chmod 600 ec2_key.pem                                  # SSH 접속을 위한 안전한 권한 설정

    # 7. EC2 서버에 SSH 접속 후 원격 배포 스크립트 실행
    - name: Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i ec2_key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
          # (선택사항) DockerHub 로그인 명령. 비활성화 되어 있음
          # docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

          # 최신 이미지 가져오기
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/spring-boot-app1:latest

          # 실행 중인 컨테이너가 있으면 중지 및 삭제
          docker stop app-container || true
          docker rm app-container || true

          # 새 컨테이너 실행 (8080 포트 매핑)
          docker run -d --name app-container -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/spring-boot-app1:latest
        EOF
